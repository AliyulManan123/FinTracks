generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  BANK
  E_WALLET
  CASH
  INVESTMENT
  CRYPTO
  LOAN
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

model User {
  id                 String      @id @default(cuid())
  email              String      @unique
  passwordHash       String?
  name               String
  avatarUrl          String?
  provider           String?     // local | google | github
  providerId         String?     @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  accounts           Account[]
  transactions       Transaction[]
  categories         Category[]
  subCategories      SubCategory[]
  budgets            Budget[]
  goals              Goal[]
  debts              Debt[]
  recurring          RecurringTransaction[]
  investments        Investment[]
}

model Account {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  type        AccountType
  currency    String       // e.g., IDR, USD
  balance     Decimal      @db.Decimal(18, 2)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  transactions Transaction[]
}

model Category {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  subCategories SubCategory[]
  transactions  Transaction[]
  budgets            Budget[]
  @@unique([userId, name])
}

model SubCategory {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  transactions Transaction[]
  @@unique([userId, categoryId, name])
}

model Transaction {
  id           String          @id @default(cuid())
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  account      Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId    String
  category     Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId   String?
  subCategory  SubCategory?    @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)
  subCategoryId String?
  amount       Decimal         @db.Decimal(18, 2)
  type         TransactionType
  description  String?
  date         DateTime
  tags         String[]        @db.Text
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Budget {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  amount      Decimal    @db.Decimal(18, 2)
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  @@unique([userId, categoryId, periodStart, periodEnd])
}

model Goal {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  target      Decimal   @db.Decimal(18, 2)
  current     Decimal   @db.Decimal(18, 2) @default(0)
  targetDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Debt {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  name          String
  principal     Decimal  @db.Decimal(18, 2)
  interestRate  Decimal  @db.Decimal(6, 4) // annual rate
  minPayment    Decimal  @db.Decimal(18, 2)
  dueDay        Int      // 1-28
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RecurringTransaction {
  id            String          @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId     String
  amount        Decimal         @db.Decimal(18, 2)
  type          TransactionType
  description   String?
  intervalDays  Int
  nextRun       DateTime
  active        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Investment {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  symbol       String
  quantity     Decimal   @db.Decimal(18, 8)
  avgPrice     Decimal   @db.Decimal(18, 4)
  currency     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@index([userId, symbol])
}
